#pragma once
#ifndef __GLL_H__
#define __GLL_H__

#include <vector>
// Gauss-Legendre-Lobatto points and weights
// https://keisan.casio.jp/exec/system/1331182061

namespace gll
{
	static const int max_p = 10;

	static const std::vector<std::vector<double>> points =
		{
			// 2 points
			{
				-1,
				1
			},
			// 3 points
			{
				-1,
				0,
				1
			},
			// 4 points
			{
				-1,
				-0.44721359549995793928183473374625524708812367192231,
				0.44721359549995793928183473374625524708812367192231,
				1
			},
			// 5 points	
			{
				-1,
				-0.65465367070797714379829245624685835556920808239543,
				0,
				0.65465367070797714379829245624685835556920808239543,
				1
			},
			// 6 points
			{
				-1,
				-0.7650553239294646928510029739593381503657356885361,
				-0.28523151648064509631415099404087907191900347272643,
				0.28523151648064509631415099404087907191900347272643,
				0.7650553239294646928510029739593381503657356885361,
				1
			},
			// 7 points
			{
				-1,
				-0.830223896278566929872032213967465139587170364872,
				-0.46884879347071421380377188190876632940559747167184,
				0,
				0.46884879347071421380377188190876632940559747167184,
				0.830223896278566929872032213967465139587170364872,
				1
			},
			// 8 points
			{
				-1,
				-0.87174014850960661533744576122066343810378066967698,
				-0.59170018143314230214451073139795318994570098951733,
				-0.20929921790247886876865726034535125529554540508668,
				0.20929921790247886876865726034535125529554540508668,
				0.59170018143314230214451073139795318994570098951733,
				0.87174014850960661533744576122066343810378066967698,
				1
			},
			// 9 points
			{
				-1,
				-0.8997579954114601573123452444183379580514802955661,
				-0.67718627951073775344588542709134245071102964761391,
				-0.36311746382617815871075206870865921302064227760088,
				0,
				0.36311746382617815871075206870865921302064227760088,
				0.67718627951073775344588542709134245071102964761391,
				0.8997579954114601573123452444183379580514802955661,
				1
			},
			// 10 points
			{
				-1,
				-0.91953390816645881382893266082233813415354307544628,
				-0.73877386510550507500310617485983072501618510137693,
				-0.47792494981044449566117509273125799788677289333057,
				-0.16527895766638702462621976595817353323115034354948,
				0.1652789576663870246262197659581735332311503435495,
				0.47792494981044449566117509273125799788677289333057,
				0.73877386510550507500310617485983072501618510137693,
				0.91953390816645881382893266082233813415354307544628,
				1
			}
		};

	static const std::vector<std::vector<double>> weights =
		{
			// 2 weights
			{
				1,
				1
			},
			// 3 weights
			{
				0.33333333333333333333333333333333333333333333333333,
				1.33333333333333333333333333333333333333333333333333,
				0.33333333333333333333333333333333333333333333333333
			},
			// 4 weights
			{
				0.16666666666666666666666666666666666666666666666667,
				0.83333333333333333333333333333333333333333333333333,
				0.83333333333333333333333333333333333333333333333333,
				0.16666666666666666666666666666666666666666666666667
			},
			// 5 weights
			{
				0.1,
				0.54444444444444444444444444444444444444444444444444,
				0.71111111111111111111111111111111111111111111111111,
				0.54444444444444444444444444444444444444444444444444,
				0.1
			},
			// 6 weights		
			{
				0.066666666666666666666666666666666666666666666666667,
				0.37847495629784698031661280821202465247632469389725 ,
				0.55485837703548635301672052512130868085700863943608 ,
				0.55485837703548635301672052512130868085700863943608 ,
				0.37847495629784698031661280821202465247632469389725 ,
				0.066666666666666666666666666666666666666666666666667
			},
			// 7 weights
			{
				0.047619047619047619047619047619047619047619047619048,
				0.2768260473615659480107004062900662934976272801799	 ,
				0.43174538120986262341787102228136227793094414839155 ,
				0.48761904761904761904761904761904761904761904761905 ,
				0.43174538120986262341787102228136227793094414839155 ,
				0.2768260473615659480107004062900662934976272801799	 ,
				0.047619047619047619047619047619047619047619047619048
			},
			// 8 weights
			{
				0.035714285714285714285714285714285714285714285714286,
				0.21070422714350603938299206577575632445534616616105 ,
				0.34112269248350436476424067710774817177511097560558 ,
				0.41245879465870388156705297140220978948382857251908 ,
				0.41245879465870388156705297140220978948382857251908 ,
				0.34112269248350436476424067710774817177511097560558 ,
				0.21070422714350603938299206577575632445534616616105 ,
				0.035714285714285714285714285714285714285714285714286
			},
			// 9 weights
			{
				0.027777777777777777777777777777777777777777777777778,
				0.16549536156080552504633972002920830583910722922516 ,
				0.2745387125001617352807056185793727259412512209865	 ,
				0.34642851097304634511513153213971828794753270625092 ,
				0.3715192743764172335600907029478458049886621315193	 ,
				0.34642851097304634511513153213971828794753270625092 ,
				0.2745387125001617352807056185793727259412512209865	 ,
				0.16549536156080552504633972002920830583910722922516 ,
				0.027777777777777777777777777777777777777777777777778
			},
			// 10 weights
			{
				0.022222222222222222222222222222222222222222222222222,
				0.1333059908510701111262271707553928981096258749978	 ,
				0.22488934206312645211945782173104784275391291396175 ,
				0.29204268367968375787558225737444389220748838968771 ,
				0.32753976118389745665651052791689314470675059913052 ,
				0.32753976118389745665651052791689314470675059913052 ,
				0.29204268367968375787558225737444389220748838968771 ,
				0.22488934206312645211945782173104784275391291396175 ,
				0.1333059908510701111262271707553928981096258749978	 ,
				0.022222222222222222222222222222222222222222222222222
			}
		};

	class shape {
	public:
		static shape& getInstance() {
			static shape instance; 
			return instance;
		}
		
		shape(const shape&) = delete;
		shape& operator=(const shape&) = delete;

	private:
		shape();
	
		template <typename T>
		using order_arr = std::vector<T>;

		template <typename T>
		using point_arr = std::vector<T>;

		order_arr<point_arr<point_arr<double>>> derivative;
	public:
		double l(int order, int shape_index, int point);
		double dl(int order, int shape_index, int point);
	};
}

#endif // !__GLL_H__